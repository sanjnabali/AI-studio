version: '3.8'

services:
  # Backend API Service
  api:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # Add performance optimizations
      - TORCH_HOME=/app/models
      - TRANSFORMERS_CACHE=/app/models
      - HF_HOME=/app/models
    volumes:
      - model_cache:/app/models
      - rag_storage:/app/rag_storage
      - logs:/app/logs
      - temp_files:/app/temp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
        reservations:
          cpus: '0.5'
          memory: 1G  # Reduced minimum for faster startup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Reduced from 120s for faster startup
    # Add shared memory for better performance
    shm_size: 2gb
    # Security improvements
    security_opt:
      - no-new-privileges:true
    # User mapping for security
    user: "1000:1000"

  # Frontend Service  
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://api:8000  # Use service name for internal communication
      - VITE_API_BASE_URL_EXTERNAL=http://localhost:8000  # For browser requests
    depends_on:
      api:
        condition: service_healthy  # Wait for API health check
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #       reservations:
  #         memory: 64M
  #   command: redis-server --appendonly yes --maxmemory 200mb --maxmemory-policy allkeys-lru

  # Optional: PostgreSQL for persistent storage (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=ai_studio
  #     - POSTGRES_USER=ai_studio
  #     - POSTGRES_PASSWORD=your_secure_password_here
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 512M
  #       reservations:
  #         memory: 128M
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ai_studio"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  model_cache:
    driver: local
  rag_storage:
    driver: local
  logs:
    driver: local
  temp_files:
    driver: local
  # Optional volumes
  # redis_data:
  #   driver: local
  # postgres_data:
  #   driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16